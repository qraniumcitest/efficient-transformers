name: Mirror Fork PRs to GHES

on:
  pull_request:
    types: [opened, reopened, synchronize, edited, ready_for_review, closed]
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: fork-pr-mirror
  cancel-in-progress: false

jobs:
  mirror_or_close:
    runs-on: ubuntu-latest
    env:
      GHES_BASE_URL: https://github.qualcomm.com
      GHES_OWNER: 
      GHES_REPO: REPO_NAME
      FORK_OWNER: YOUR_FORK_OWNER
      FORK_REPO: YOUR_FORK_REPO
    steps:
      - name: Ensure PR targets main and not draft
        if: github.event.action != 'closed'
        run: |
          set -e
          BASE="${{ github.event.pull_request.base.ref }}"
          DRAFT="{{ github.event.pull_request.draft }}"
          if [ "$BASE" != "main" ]; then
            echo "PR base is not main. Skipping"
            exit 78
          fi
          if [ "$DRAFT" = "true" ]; then
            echo "PR is draft. Skipping."
            exit 78
          fi
      - name: Checkout PR head
        if: github.event.action != 'closed'
        uses: actions/checkout@v4
        with:
          ref:${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Configure git
        if: github.event.action != 'closed'
        run: |
          git config user.email "pr-mirror@local"
          git config user.name "pr-mirror"

      - name: Add GHES remote
        if: github.event.action != 'closed'
        env:
          GHES_PAT: ${{ secrets.GHES_PAT }}
        run: |
          git remote add ghes "${GHES_BASE_URL}/$GHES_OWNER}/${GHES_REPO}.git"
          git remote set-url ghes "https://x-access-token:${GHES_PAT}@github.qualcomm.com/qraniumtest/efficient-transformers.git"

        - name: Push PR branch to GHES
          if: github.event.action != 'closed'
          id: push_branch
          run: |
            set -euo pipefail
            PR_NUM="${{ github.event.pull_request.number }}"
            BRANCH="fork-pr-${PR_NUM}"
            git push ghes "HEADS:${BRANCH}" --force
            echo "branch=${BRANCH}" >> "$GITHUB_OUTPUT"

         - name: Create/Update GHES PR
           if: github.event.action != 'closed'
           env:
             GHES_PAT: ${{ secrets.GHES_PAT }}
           run: |
            set -euo pipefail
            PR_NUM="${{ github.event.pull_request.number }}"
            BRANCH="${{ steps.push_branch.outputs.branch }}"
            TITLE="${{ github.event.pull_request.title }}"
            URL=$(echo "$pr" | jq -r .body)
            HEAD_SHA="${{ github.event.pull_request.head_sha }}"
            BODY_RAW="${{ github.event.pull_request.body }}"
            URL="${{ github.event.pull_request.html_url }}"
            BODY_ESCAPED="$(echo "$BODY_RAW" | tr '\n''' | tr '\r''')"

            META=$(cat <<EOF
              [Mirror Metadat]
              Original-PR-Repo: ${{ env.FORK_OWNER }}/$${{ env.FORK_REPO }}
              Original-PR-Number: ${PR_NUM}
              Original-PR-URL: ${URL}
              Original-Head-SHA: ${HEAD_SHA}
              EOF
              )
              PR_BODY="Mirrored from ${URL}
            ${META}
            ---
            ${BODY_ESCAPED}"
            API="https://github.qualcomm.com/api/v3/repos/qraniumtest/efficient-transformers/pulls"
            EXISTING=$(curl -s -H "Authorization: token ${GHES_PAT}" "${{ env.GHES_BASE_URL }}/api/v3/repos/${{ env.GHES_OWNER }}/${{ env.GHES_REPO }}/pulls?state=open&head=${GHES_OWNER}:${BRANCH}" | jq '.[0].number // empty')
            #Check PR Exists for this branch
            if [ -n "$EXISTING" ]; then
                echo "Updating GHES PR #$EXISTING}"
                curl -s -H "Authorization: token ${GHES_PAT}" -H "Accept: application/vnd.github+json" \
                  -X PATCH "${{ env.GHES_BASE_URL }}/api/v3/repos/${{ env.GHES_OWNER }}/${{ env.GHES_REPO }}/pulls/${EXISTING}" \
                  -d "$(jq -n --qrg t "Fork PR #$PR_NUM}] ${TITLE}" --arg b "$PR_BODY" '{title:$t, body:$b}')" > /dev/null
              else
                echo "Creating GHES PR"
                curl -s -X POST \ \
                   -H "Authorization: token ${GHES_PAT}" -H "Accept: application/vnd.github+json" \
                   "${API}" \
                  -d "$(jq -n --arg t "Fork PR #$PR_NUM}] ${TITLE}" --arg h "${BRANCH}" --arg b "$PR_BODY" '{title:$t,head:$h, base"main", body:$b}')"\"}" > /dev/null
            fi

     - name: Clean up GHES branches for closed upstream PRs
       if: github.event.action == 'closed'
        env:
          GHES_PAT: ${{ secrets.GHES_PAT }}
          run: |
            set -euo pipefail
            PR_NUM="${{ github.event.pull_request.number }}"
            BRANCH="fork-pr-${PR_NUM}"
            PR_ID=$(curl -s -H "Authorization: token ${GHES_PAT}" "${{ env.GHES_BASE_URL }}/api/v3/repos/${{ env.GHES_OWNER }}/${{ env.GHES_REPO }}/pulls?state=open&head=${GHES_OWNER}:${BRANCH}" | jq '.[0].number // empty')
            if [ -n "$PR_ID" ]; then
               curl -s -H "Authorization: token ${GHES_PAT}" -H "Accept: application/vnd.github+json" \
                  -X PATCH "${{ env.GHES_BASE_URL }}/api/v3/repos/${{ env.GHES_OWNER }}/${{ env.GHES_REPO }}/pulls/${PR_ID}" \
                  -d '{"state":"closed"}' > /dev/null
            fi
            curl -s -X DELETE \
                -H "Authorization: token ${GHES_PAT}" -H "Accept: application/vnd.github+json" \
                "${{ env.GHES_BASE_URL }}/api/v3/repos/${{ env.GHES_OWNER }}/${{ env.GHES_REPO }}/git/refs/heads/$BRANCH" > /dev/null || true
              
          


        
      
